<?php

namespace App\Repositories;

use App\Cinema;
use App\Repositories\Abstracts\CRUDModelAbstract;
use App\Repositories\Interfaces\CinemaInterface;
use App\Repositories\Interfaces\CinemaRepositoryInterface;

/**
 * Class CinemaRepository
 *
 * @package App\Repositories
 */
class CinemaRepository extends CRUDModelAbstract implements CinemaRepositoryInterface
{
    use LoggerTrait;

    protected $model = Cinema::class;

    /**
     * Create new cinema
     *
     * @param array $fields
     * @return mixed
     * @throws \Exception
     */
    public function create($fields = [])
    {
        try {
            $cinema = parent::create($fields); // TODO: Change the autogenerated stub
            if ($cinema) {
                $this->createLog($cinema, CinemaInterface::class);
                return $cinema;
            }
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * Update Cinema
     *
     * @param null $modelId
     * @param null $model
     * @param array $fields
     * @return Cinema|\Illuminate\Database\Eloquent\Model
     * @throws \Exception
     */
    public function update($modelId = null, $model = null, $fields = [])
    {
        try {
            /** @var Cinema $cinema */
            $cinema = parent::update($modelId, $model, $fields); // TODO: Change the autogenerated stub
            if ($cinema) {
                $this->updateLog($cinema, CinemaInterface::class);
                return $cinema;
            }
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * Destroy cinema
     *
     * @param null $modelId
     * @param null $model
     * @return bool|\Illuminate\Database\Eloquent\Model
     * @throws \Exception
     */
    public function delete($modelId = null, $model = null)
    {
        try {
            $cinema = parent::delete($modelId, $model); // TODO: Change the autogenerated stub
            if ($cinema) {
                $this->deleteLog($cinema, CinemaInterface::class);
            }
            return $cinema;
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }
}
