<?php

namespace App\Repositories;

use App\Repositories\Abstracts\CRUDModelAbstract;
use App\Repositories\Interfaces\ShowRepositoryInterface;
use App\Show;

/**
 * Class ShowRepository
 *
 * @package App\Repositories
 */
class ShowRepository extends CRUDModelAbstract implements ShowRepositoryInterface
{
    use LoggerTrait;

    protected $model = Show::class;

    /**
     * Create new record for model
     *
     * @param array $fields
     * @param bool $isWriteLog
     * @return mixed
     * @throws \Exception
     */
    public function create($fields = [], bool $isWriteLog = true)
    {
        try {
            return parent::create($fields);

        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @param null|int|string $modelId
     * @param null|Model $model
     * @param bool $isWriteLog
     * @return bool|Show
     * @throws \Exception
     */
    public function delete($modelId = null, $model = null, bool $isWriteLog = true)
    {
        try {
            $show = parent::delete($modelId, $model); // TODO: Change the autogenerated stub

            if ($show) {
                $this->deleteLog($show, Show::class);
                return $show;
            }
            throw new \Exception(__('Please try again.'));

        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * Update model data
     *
     * @param string|int|null $showId
     * @param Show|null $show
     * @param array $fields
     * @param bool $isWriteLog
     * @return Show
     * @throws \Exception
     */
    public function update($showId = null, $show = null, $fields = [], bool $isWriteLog = true)
    {
        try {
            if ($showId !== null) {
                /** @var Show $show */
                $show = $this->find($showId);
            }

            $show = parent::update(null, $show, $fields);

            $this->updateLog($show, Show::class);

            return $show;

        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }
}
